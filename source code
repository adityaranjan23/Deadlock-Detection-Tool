class DeadlockDetector:
    def _init_(self, num_processes, num_resources):
        self.num_processes = num_processes
        self.num_resources = num_resources
        
        # Allocation Matrix: shows current resource allocation to processes
        self.allocation = [[0] * num_resources for _ in range(num_processes)]
        
        # Request Matrix: shows resources requested by processes
        self.request = [[0] * num_resources for _ in range(num_processes)]
        
        # Available resources vector
        self.available = [0] * num_resources
        
        # Mark processes that are not deadlocked
        self.mark = [False] * num_processes

    def set_allocation(self, process_id, resource_id, units):
        """Set current resource allocation"""
        if 0 <= process_id < self.num_processes and 0 <= resource_id < self.num_resources:
            self.allocation[process_id][resource_id] = units

    def set_request(self, process_id, resource_id, units):
        """Set resource request"""
        if 0 <= process_id < self.num_processes and 0 <= resource_id < self.num_resources:
            self.request[process_id][resource_id] = units

    def set_available(self, resource_id, units):
        """Set available resources"""
        if 0 <= resource_id < self.num_resources:
            self.available[resource_id] = units

    def detect_deadlock(self):
        """Main deadlock detection algorithm"""
        # Step 1: Initialize mark array
        for i in range(self.num_processes):
            # Mark processes with no allocation
            if sum(self.allocation[i]) == 0:
                self.mark[i] = True

        # Make a copy of available resources
        work = self.available.copy()
        
        # Step 2: Look for unmarked process that can run
        while True:
            found = False
            for i in range(self.num_processes):
                if not self.mark[i]:
                    # Check if request can be satisfied with current available resources
                    can_run = True
                    for j in range(self.num_resources):
                        if self.request[i][j] > work[j]:
                            can_run = False
                            break
                    
                    if can_run:
                        # Process can run, add its allocated resources to work
                        for j in range(self.num_resources):
                            work[j] += self.allocation[i][j]
                        self.mark[i] = True
                        found = True
                        break
            
            if not found:
                break

        # Step 3: Check for deadlocked processes
        deadlocked = []
        for i in range(self.num_processes):
            if not self.mark[i]:
                deadlocked.append(i)
        
        return deadlocked

    def print_state(self):
        """Print current system state"""
        print("Allocation Matrix:")
        for row in self.allocation:
            print(row)
        
        print("\nRequest Matrix:")
        for row in self.request:
            print(row)
        
        print("\nAvailable Resources:")
        print(self.available)

# Example usage
def main():
    # Create a system with 5 processes and 3 resources
    detector = DeadlockDetector(5, 3)

    # Set up a deadlock scenario
    # P0 holds R0, requests R1
    detector.set_allocation(0, 0, 1)
    detector.set_request(0, 1, 1)

    # P1 holds R1, requests R2
    detector.set_allocation(1, 1, 1)
    detector.set_request(1, 2, 1)

    # P2 holds R2, requests R0
    detector.set_allocation(2, 2, 1)
    detector.set_request(2, 0, 1)

    # Set available resources
    detector.set_available(0, 0)
    detector.set_available(1, 0)
    detector.set_available(2, 0)

    # Print current state
    detector.print_state()

    # Detect deadlock
    deadlocked_processes = detector.detect_deadlock()
    
    if deadlocked_processes:
        print("\nDeadlock detected! Deadlocked processes:", deadlocked_processes)
    else:
        print("\nNo deadlock detected")

if _name_ == "_main_":
    main()
